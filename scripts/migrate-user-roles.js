/**
 * Script de migration des r√¥les utilisateurs
 * Mise √† jour vers la nouvelle hi√©rarchie de r√¥les
 */

const fs = require('fs').promises;
const path = require('path');

// Chemin vers le fichier des utilisateurs
const USERS_FILE_PATH = path.join(__dirname, '..', 'data', 'by-date', 'users.json');

// Mapping des nouveaux r√¥les
const ROLE_MIGRATION = {
    'SALIOU': 'superviseur',
    'OUSMANE': 'superviseur',
    'NADOU': 'superutilisateur',
    'PAPI': 'superutilisateur'
};

async function migrateUserRoles() {
    try {
        console.log('üöÄ D√©but de la migration des r√¥les utilisateurs...');
        
        // Lecture du fichier des utilisateurs
        const data = await fs.readFile(USERS_FILE_PATH, 'utf8');
        const users = JSON.parse(data);
        
        console.log(`üìã ${users.length} utilisateurs trouv√©s`);
        
        // Sauvegarde avant migration
        const backupPath = `${USERS_FILE_PATH}.backup-${Date.now()}`;
        await fs.writeFile(backupPath, data, 'utf8');
        console.log(`üíæ Sauvegarde cr√©√©e: ${path.basename(backupPath)}`);
        
        let migratedCount = 0;
        
        // Migration des utilisateurs
        users.forEach(user => {
            if (ROLE_MIGRATION[user.username]) {
                const oldRole = user.role;
                const newRole = ROLE_MIGRATION[user.username];
                
                user.role = newRole;
                migratedCount++;
                
                console.log(`‚úÖ ${user.username}: ${oldRole} ‚Üí ${newRole}`);
            }
        });
        
        if (migratedCount === 0) {
            console.log('‚ÑπÔ∏è  Aucun utilisateur √† migrer trouv√©');
            return;
        }
        
        // Sauvegarde des modifications
        await fs.writeFile(USERS_FILE_PATH, JSON.stringify(users, null, 2), 'utf8');
        
        console.log(`\nüéâ Migration termin√©e avec succ√®s!`);
        console.log(`üìä ${migratedCount} utilisateur(s) migr√©(s)`);
        console.log(`üíæ Sauvegarde disponible: ${path.basename(backupPath)}`);
        
        // Affichage du r√©sum√© des r√¥les
        console.log('\nüìã R√©sum√© des r√¥les apr√®s migration:');
        const roleStats = {};
        users.forEach(user => {
            roleStats[user.role] = (roleStats[user.role] || 0) + 1;
        });
        
        Object.entries(roleStats).forEach(([role, count]) => {
            console.log(`   ${role}: ${count} utilisateur(s)`);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error);
        process.exit(1);
    }
}

// Fonction pour afficher l'aide
function showHelp() {
    console.log(`
üìñ Migration des r√¥les utilisateurs

Ce script met √† jour les r√¥les des utilisateurs selon la nouvelle hi√©rarchie:

üéØ Migrations pr√©vues:
   ‚Ä¢ SALIOU: user ‚Üí superviseur
   ‚Ä¢ OUSMANE: user ‚Üí superviseur  
   ‚Ä¢ NADOU: user ‚Üí superutilisateur
   ‚Ä¢ PAPI: user ‚Üí superutilisateur

üöÄ Utilisation:
   node scripts/migrate-user-roles.js [OPTIONS]

üîß Options:
   --help, -h     Afficher cette aide
   --dry-run      Simuler la migration sans appliquer les changements

üíæ Sauvegardes:
   Une sauvegarde automatique est cr√©√©e avant toute modification
    `);
}

// Fonction de simulation (dry-run)
async function dryRunMigration() {
    try {
        console.log('üß™ Mode simulation (dry-run) - Aucune modification ne sera appliqu√©e\n');
        
        const data = await fs.readFile(USERS_FILE_PATH, 'utf8');
        const users = JSON.parse(data);
        
        console.log('üìã Migrations qui seraient appliqu√©es:');
        
        let wouldMigrateCount = 0;
        users.forEach(user => {
            if (ROLE_MIGRATION[user.username]) {
                const oldRole = user.role;
                const newRole = ROLE_MIGRATION[user.username];
                wouldMigrateCount++;
                console.log(`   ${user.username}: ${oldRole} ‚Üí ${newRole}`);
            }
        });
        
        if (wouldMigrateCount === 0) {
            console.log('   Aucune migration n√©cessaire');
        } else {
            console.log(`\n‚ú® ${wouldMigrateCount} utilisateur(s) seraient migr√©s`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la simulation:', error);
        process.exit(1);
    }
}

// Traitement des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

if (args.includes('--dry-run')) {
    dryRunMigration();
} else {
    migrateUserRoles();
}
